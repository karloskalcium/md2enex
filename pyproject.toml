[tool.poetry]
authors = ["karloskalcium"]
description = "Converts markdown to Evernote ENEX files so they can be imported"
license = "MIT"
name = "md2enex"
readme = "README.md"
repository = "https://github.com/karloskalcium/md2enex"
version = "0.3"

[tool.poetry.dependencies]
python = "^3.10"
lxml = "^5.2.1"
typer = "^0.12.3"
pypandoc-binary = "^1.13"

[tool.poetry.group.dev.dependencies]
pytest-cov = "^5.0.0"
ruff = "^0.4.1"
freezegun = "^1.5.1"

[tool.poetry.scripts]
md2enex = "md2enex.md2enex:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 120
target-version = "py310"

# linting
[tool.ruff.lint]
select = [
    # flake8-comprehensions
    "C4",
    # pycodestyle
    "E",
    # Pyflakes
    "F",
    # pyupgrade
    "UP",
    # flake8-bugbear
    "B",
    # flake8-pytest
    "PT",
    # flake8-simplify
    "SIM",
    # isort
    "I",
]

# testing
[tool.coverage.run]
branch = true
source = [
    "md2enex",
]
omit = [
    "**/tests/*",
    "**/test_*",
    "**/conftest*",
    "**/__init__.py",
    "**/__main__.py",
]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
]

ignore_errors = true

[tool.coverage.html]
directory = "results/coverage"

[tool.pytest.ini_options]
# Show extra test summary info as specified by chars (a)ll except passed
# Output test results to junit.xml
addopts = "-vvv --tb=long -ra --junitxml=results/unit/pytest-unit.xml --color=yes"
testpaths = "tests"
# log_cli = true
# log_cli_level = "DEBUG"
